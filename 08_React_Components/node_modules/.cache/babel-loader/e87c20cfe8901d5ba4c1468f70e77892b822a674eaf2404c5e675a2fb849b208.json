{"ast":null,"code":"var _jsxFileName = \"/Users/yangshulin/github_repo/Tuition/react_tutorial/08_React_Components/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  /**\n   * 在React 中， 当组件渲染完毕，再修改组件中的变量，不会使组件重新渲染\n   * 需要一个特殊的变量，当这个变量被修改时，组件就会重新渲染\n   * 就是 State, State 对当前组件，其他组件无法访问\n   * State 相当于一个变量，只是这个变量在react里进行了注册，react会监控这个变量\n   * \n   * import {useState} from \"react\";\n   * 需要一个值作为参数，这个值就是state的初始值\n   * 该函数会返回一个数组\n   * 数组中第一个元素，是初始值\n   *  - 初始值只用来显示数据， 直接修改不会触发组件重新渲染\n   * 数组中第二个元素，是一个函数. 通常会命名为setxxx\n   *  - 这个函数主要用来修改state, 调用修改state 然后组件会被重新渲染\n   * \n   */\n\n  const result = useState(1);\n  console.log(result);\n\n  //let count = 1;\n  let count = result[0];\n  let setCount = result[1];\n  const addHandler = () => {\n    //alert('+1');\n    count += 1;\n    setCount(count);\n    console.log('count value is ' + count);\n  };\n  const subHandler = () => {\n    count -= 1;\n    //alert('-1');\n\n    console.log('count value is ' + count);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'app',\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"count_number\",\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subHandler,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHandler,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n_s(App, \"4HZs06ub3Fm8iCoigleadESLd4c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","result","console","log","count","setCount","addHandler","subHandler","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/yangshulin/github_repo/Tuition/react_tutorial/08_React_Components/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\nconst App = () => {\n\n    /**\n     * 在React 中， 当组件渲染完毕，再修改组件中的变量，不会使组件重新渲染\n     * 需要一个特殊的变量，当这个变量被修改时，组件就会重新渲染\n     * 就是 State, State 对当前组件，其他组件无法访问\n     * State 相当于一个变量，只是这个变量在react里进行了注册，react会监控这个变量\n     * \n     * import {useState} from \"react\";\n     * 需要一个值作为参数，这个值就是state的初始值\n     * 该函数会返回一个数组\n     * 数组中第一个元素，是初始值\n     *  - 初始值只用来显示数据， 直接修改不会触发组件重新渲染\n     * 数组中第二个元素，是一个函数. 通常会命名为setxxx\n     *  - 这个函数主要用来修改state, 调用修改state 然后组件会被重新渲染\n     * \n     */\n\n    const result = useState(1);\n    console.log(result)\n\n    //let count = 1;\n    let count = result[0]\n    let setCount = result[1]\n    const addHandler =() => {\n        //alert('+1');\n        count += 1;\n        setCount(count)\n        console.log('count value is ' + count);\n    };\n\n\n    const subHandler =() => {\n        count -= 1;\n        //alert('-1');\n   \n        console.log('count value is ' + count);\n    };\n\n    return <div className={'app'}>\n        <h1 id='count_number'>{count}</h1>\n        <button onClick={subHandler}>-</button>\n        <button onClick={addHandler}>+</button>\n         </div>\n};\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAAQA,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAMC,MAAM,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAC1BM,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;;EAEnB;EACA,IAAIG,KAAK,GAAGH,MAAM,CAAC,CAAC,CAAC;EACrB,IAAII,QAAQ,GAAGJ,MAAM,CAAC,CAAC,CAAC;EACxB,MAAMK,UAAU,GAAEA,CAAA,KAAM;IACpB;IACAF,KAAK,IAAI,CAAC;IACVC,QAAQ,CAACD,KAAK,CAAC;IACfF,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGC,KAAK,CAAC;EAC1C,CAAC;EAGD,MAAMG,UAAU,GAAEA,CAAA,KAAM;IACpBH,KAAK,IAAI,CAAC;IACV;;IAEAF,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGC,KAAK,CAAC;EAC1C,CAAC;EAED,oBAAON,OAAA;IAAKU,SAAS,EAAE,KAAM;IAAAC,QAAA,gBACzBX,OAAA;MAAIY,EAAE,EAAC,cAAc;MAAAD,QAAA,EAAEL;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClChB,OAAA;MAAQiB,OAAO,EAAER,UAAW;MAAAE,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvChB,OAAA;MAAQiB,OAAO,EAAET,UAAW;MAAAG,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AACf,CAAC;AAACd,EAAA,CA5CID,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AA8CT,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}