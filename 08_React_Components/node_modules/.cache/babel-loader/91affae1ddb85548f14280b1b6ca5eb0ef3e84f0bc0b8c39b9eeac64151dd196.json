{"ast":null,"code":"var _jsxFileName = \"/Users/yangshulin/github_repo/Tuition/react_tutorial/08_React_Components/src/Components/Logs/LogItem/LogItem.js\";\nimport React from 'react';\nimport MyDate from './MyDate/MyDate';\nimport './LogItem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogItem = props => {\n  //在函数组件中， 属性就相当于函数的参数， 可以通过参数来访问\n  //可以在函数组件的形参重定义一个props, props 指向的是一个对象\n  // 它包含了父组件中传递的所有参数\n  // 只支持属性，父传子\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    children: [/*#__PURE__*/_jsxDEV(MyDate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"desc\",\n        children: props.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"time\",\n        children: [props.time, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n};\n_c = LogItem;\nexport default LogItem;\nvar _c;\n$RefreshReg$(_c, \"LogItem\");","map":{"version":3,"names":["React","MyDate","jsxDEV","_jsxDEV","LogItem","props","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","desc","time","_c","$RefreshReg$"],"sources":["/Users/yangshulin/github_repo/Tuition/react_tutorial/08_React_Components/src/Components/Logs/LogItem/LogItem.js"],"sourcesContent":["import React from 'react';\nimport MyDate from './MyDate/MyDate';\n\nimport './LogItem.css'\n\nconst LogItem = (props) => {\n\n    //在函数组件中， 属性就相当于函数的参数， 可以通过参数来访问\n    //可以在函数组件的形参重定义一个props, props 指向的是一个对象\n    // 它包含了父组件中传递的所有参数\n    // 只支持属性，父传子\n    console.log(props);\n    return <div className='item'>\n            <MyDate />\n            \n            <div className=\"content\">\n                <h2 className=\"desc\">{props.desc}</h2>\n                <h2 className=\"time\">{props.time} mins</h2>\n            </div>\n         </div>\n};\n\nexport default LogItem;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,OAAO,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAEvB;EACA;EACA;EACA;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,oBAAOF,OAAA;IAAKK,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACpBN,OAAA,CAACF,MAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVV,OAAA;MAAKK,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACpBN,OAAA;QAAIK,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAEJ,KAAK,CAACS;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtCV,OAAA;QAAIK,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAEJ,KAAK,CAACU,IAAI,EAAC,OAAK;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AACf,CAAC;AAACG,EAAA,GAfIZ,OAAO;AAiBb,eAAeA,OAAO;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}